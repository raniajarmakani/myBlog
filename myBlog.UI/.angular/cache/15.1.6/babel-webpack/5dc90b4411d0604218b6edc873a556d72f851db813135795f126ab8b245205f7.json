{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem(\"myBlog-currentUser\")));\n  }\n  login(model) {\n    return this.http.post('${environment.webApi}/User/login', model).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('myBlog-currentUser', JSON.stringify(user));\n        this.setCurrentUser(user);\n      }\n      return user;\n    }));\n  }\n  register(model) {\n    return this.http.post(`${environment.webApi}/User/register`, model).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('myBlog-currentUser', JSON.stringify(user));\n        this.setCurrentUser(user);\n      }\n      return user;\n    }));\n  }\n  setCurrentUser(user) {\n    this.currentUserSubject$.next(user);\n  }\n  get currentUserValue() {\n    return this.currentUserSubject$.value;\n  }\n  givenUserIsLoggedIn(username) {\n    return this.isLoggedIn() && this.currentUserValue.username === username;\n  }\n  isLoggedIn() {\n    const currentUser = this.currentUserValue;\n    const isLoggedIn = !!currentUser && !!currentUser.Token;\n    return isLoggedIn;\n  }\n  logout() {\n    localStorage.removeItem('myBlog-currentUser');\n    //   this.currentUserSubject$.next();\n  }\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAQ1D,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEZ,IAAI,CAACC,mBAAmB,GAAG,IAAIL,eAAe,CAAOM,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAE,CAAC,CAAC;EAC/G;EAEAC,KAAK,CAACC,KAAgB;IACpB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,kCAAkC,EAAED,KAAK,CAAC,CAACE,IAAI,CACzEd,GAAG,CAAEe,IAAW,IAAI;MAElB,IAAIA,IAAI,EAAE;QACRN,YAAY,CAACO,OAAO,CAAC,oBAAoB,EAAET,IAAI,CAACU,SAAS,CAACF,IAAI,CAAC,CAAC;QAChE,IAAI,CAACG,cAAc,CAACH,IAAI,CAAC;;MAG3B,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEAI,QAAQ,CAACP,KAAiB;IACxB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,GAAGX,WAAW,CAACkB,MAAM,gBAAgB,EAAER,KAAK,CAAC,CAACE,IAAI,CAC5Ed,GAAG,CAAEe,IAAW,IAAI;MAElB,IAAIA,IAAI,EAAE;QACRN,YAAY,CAACO,OAAO,CAAC,oBAAoB,EAAET,IAAI,CAACU,SAAS,CAACF,IAAI,CAAC,CAAC;QAChE,IAAI,CAACG,cAAc,CAACH,IAAI,CAAC;;MAG3B,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEAG,cAAc,CAACH,IAAU;IACvB,IAAI,CAACT,mBAAmB,CAACe,IAAI,CAACN,IAAI,CAAC;EACrC;EAEA,IAAWO,gBAAgB;IACzB,OAAO,IAAI,CAAChB,mBAAmB,CAACiB,KAAK;EACvC;EAEOC,mBAAmB,CAACC,QAAgB;IACzC,OAAO,IAAI,CAACC,UAAU,EAAE,IAAI,IAAI,CAACJ,gBAAgB,CAACG,QAAQ,KAAKA,QAAQ;EACzE;EAEOC,UAAU;IACf,MAAMC,WAAW,GAAG,IAAI,CAACL,gBAAgB;IACzC,MAAMI,UAAU,GAAG,CAAC,CAACC,WAAW,IAAI,CAAC,CAACA,WAAW,CAACC,KAAK;IACvD,OAAOF,UAAU;EACnB;EAEAG,MAAM;IACJpB,YAAY,CAACqB,UAAU,CAAC,oBAAoB,CAAC;IAChD;EACC;;;AA3DW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["map","BehaviorSubject","environment","UserService","constructor","http","currentUserSubject$","JSON","parse","localStorage","getItem","login","model","post","pipe","user","setItem","stringify","setCurrentUser","register","webApi","next","currentUserValue","value","givenUserIsLoggedIn","username","isLoggedIn","currentUser","Token","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\myBlog\\myBlog.UI\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserCreate } from '../Models/User/user-create.models';\nimport { UserLogin } from '../Models/User/user-login.model';\nimport { User } from '../Models/User/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private currentUserSubject$: BehaviorSubject<User>\n\n  constructor(\n    private http: HttpClient\n  ) { \n    this.currentUserSubject$ = new BehaviorSubject<User>(JSON.parse(localStorage.getItem(\"myBlog-currentUser\")!));\n  }\n\n  login(model: UserLogin) : Observable<User>  {\n    return this.http.post<User>('${environment.webApi}/User/login', model).pipe(\n      map((user : User) => {\n\n        if (user) {\n          localStorage.setItem('myBlog-currentUser', JSON.stringify(user));\n          this.setCurrentUser(user);\n        }\n\n        return user;\n      })\n    )\n  }\n\n  register(model: UserCreate) : Observable<User> {\n    return this.http.post<User>(`${environment.webApi}/User/register`, model).pipe(\n      map((user : User) => {\n\n        if (user) {\n          localStorage.setItem('myBlog-currentUser', JSON.stringify(user));\n          this.setCurrentUser(user);\n        }\n\n        return user;\n      })\n    )\n  }\n\n  setCurrentUser(user: User) {\n    this.currentUserSubject$.next(user);\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject$.value;\n  }\n\n  public givenUserIsLoggedIn(username: string) {\n    return this.isLoggedIn() && this.currentUserValue.username === username;\n  }\n\n  public isLoggedIn() {\n    const currentUser = this.currentUserValue;\n    const isLoggedIn = !!currentUser && !!currentUser.Token;\n    return isLoggedIn;\n  }\n\n  logout() {\n    localStorage.removeItem('myBlog-currentUser');\n //   this.currentUserSubject$.next();\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}