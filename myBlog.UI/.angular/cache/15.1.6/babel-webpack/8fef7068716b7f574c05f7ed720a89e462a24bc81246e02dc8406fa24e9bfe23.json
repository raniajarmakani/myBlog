{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nexport class JwtInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    const currentUser = this.userService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.Token;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n    if (isApiUrl && isLoggedIn) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ${currentUser.Token}'\n        }\n      });\n      return next.handle(request);\n    }\n    return next.handle(request);\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.UserService));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAE/B;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB;IACrD,MAAMC,UAAU,GAAGF,WAAW,IAAIA,WAAW,CAACG,KAAK;IACnD,MAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;IAE3D,IAAGH,QAAQ,IAAIF,UAAU,EAAC;MACxBJ,OAAO,GAAEA,OAAO,CAACU,KAAK,CACpB;QACEC,UAAU,EAAC;UACTC,aAAa,EAAC;;OAEjB,CACF;MACD,OAAOX,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;;IAG7B,OAAOC,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;;AAvBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;AAAA","names":["environment","JwtInterceptor","constructor","userService","intercept","request","next","currentUser","currentUserValue","isLoggedIn","Token","isApiUrl","url","startsWith","webApi","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\myBlog\\myBlog.UI\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserService } from '../services/user.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private userService: UserService) {\n\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const currentUser = this.userService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.Token;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n\n    if(isApiUrl && isLoggedIn){\n      request= request.clone(\n        {\n          setHeaders:{\n            Authorization:'Bearer ${currentUser.Token}'\n          }\n        }\n      )\n      return next.handle(request);\n    }\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}